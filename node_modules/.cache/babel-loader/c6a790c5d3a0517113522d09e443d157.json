{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    defaultColorScheme = 'light'\n  } = theme,\n        otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n\n  const {\n    [defaultColorScheme]: light\n  } = colorSchemes,\n        otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n\n      const css = _extends({}, rootCss);\n\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"names":["_extends","_toPropertyKey","_objectWithoutPropertiesLoose","_excluded","deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","defaultColorScheme","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","map","Object","entries","forEach","key","scheme","generateCssVars","colorScheme","_parserConfig$getSele2","_parserConfig$getSele","selector","getSelector","call"],"sources":["C:/Users/khucd/OneDrive/Máy tính/SEP_GAPP_GSP24SE58/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {},\n      defaultColorScheme = 'light'\n    } = theme,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      [defaultColorScheme]: light\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n      const css = _extends({}, rootCss);\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"],"mappings":"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"},"metadata":{},"sourceType":"module"}